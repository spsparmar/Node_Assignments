swagger: "2.0"
info:
  description: "Starwars API."
  version: "1.0.0"
  title: "SWAPI"
host: "swapi.co"
basePath: "/api/"
tags:
- name: "Vehicle"
  description: "Everything about your Vehicle"
- name: "People"
  description: "Everything about your People"
- name: "Starship"
  description: "Everything about your Starship"
- name: "Species"
  description: "Everything about your Species"
schemes:
- "http"
paths:
  /Vehicle:
    get:
      tags:
      - "Vehicle"
      summary: "Find list of vehicles"
      description: "Returns a List of vehicle"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
             $ref: "#/definitions/Vehicle"
  /Vehicle/{VehicleId}:
    get:
      tags:
      - "Vehicle"
      summary: "Find Vehicle by ID"
      description: "Returns a single vehicle"
      produces:
      - "application/json"
      parameters:
      - name: "VehicleId"
        in: "path"
        description: "ID of Vehicle to return"
        required: true
        type: "number"
      - name: "q"
        in: "query"
        required: false
        type: "string"
        items:
          type: "string"
          enum:
          - "name"
          - "model"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Vehicle"
  /Vehicle/schema:
    get:
      tags:
      - "Vehicle"
      summary: "Find Vehicle Schema"
      description: "Returns a json schema"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Vehicle"
  /People:
    get:
      tags:
      - "People"
      summary: "Find list of People"
      description: "get all the people resources"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/people"
  /People/{PeopleId}:
    get:
      tags:
      - "People"
      summary: "Find peoplee by ID"
      description: "get a specific people resource"
      produces:
      - "application/json"
      parameters:
      - name: "PeopleId"
        in: "path"
        description: "ID of people to return"
        required: true
        type: "number"
      - name: "q"
        in: "query"
        required: false
        type: "string"
        items:
          type: "string"
          enum:
          - "name"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/people"
  /People/schema:
    get:
      tags:
      - "People"
      summary: "Return Schema"
      description: "Returns a json Schema"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/people"
  /starship:
    get:
      tags:
      - "Starship"
      summary: "Find list of starships"
      description: "Returns a List of starship"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/starship"
  /starship/{starshipId}:
    get:
      tags:
      - "Starship"
      summary: "Find starship by ID"
      description: "Returns a single starship"
      produces:
      - "application/json"
      parameters:
      - name: "starshipId"
        in: "path"
        description: "ID of starship to return"
        required: true
        type: "number"
      - name: "q"
        in: "query"
        required: false
        type: "string"
        items:
          type: "string"
          enum:
          - "name"
          - "model"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/starship"
  /starship/schema:
    get:
      tags:
      - "Starship"
      summary: "Find starship by ID"
      description: "Returns a json schema"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/starship"
  /species:
    get:
      tags:
      - "Species"
      summary: "Find list of species"
      description: "get all the species resources"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/species"
  /species/{speciesId}:
    get:
      tags:
      - "Species"
      summary: "Find speciese by ID"
      description: "get a specific species resource"
      produces:
      - "application/json"
      parameters:
      - name: "speciesId"
        in: "path"
        description: "ID of species to return"
        required: true
        type: "number"
      - name: "q"
        in: "query"
        required: false
        type: "string"
        items:
          type: "string"
          enum:
          - "name"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/species"
  /species/schema:
    get:
      tags:
      - "Species"
      summary: "Return Schema"
      description: "Returns a json Schema"
      operationId: "getSpeciesschema"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/species"
definitions:
  Vehicle:
    type: "object"
    required:
    - "name"
    properties:
      model:
        type: "string"
        example: "All-Terrain Attack Transport"
      Vehicle_Class:
        type: "string"
      name:
        type: "string"
        example: "speeder bike"
      Manufacturer:
        type: "string"
      Length:
        type: "integer"
        format: "int32"
      cost_in_credits:
        type: "string"
      max_atmospheric_speed:
        type: "string"
      cargo-capacity:
        type: "string"
      consumables:
        type: "string"
      films:
        type: "string"
      pilots:
        type: "string"
      url:
        type: "string"
      credited:
        type: "string"
      edited:
        type: "string"
  people:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "Shiv"
      birth_year:
        type: "string"
      eye_color:
        type: "string"
      gender:
        type: "string"
      hair_color:
        type: "string"
      height:
        type: "string"
      mass:
        type: "string"
      skin_color:
        type: "string"
      homeworld:
        type: "string"
      films:
        type: "array"
        items:
          type: "string"
        example: "http://swapi.co/api/planets/1/"
      species:
        type: "array"
        items:
          type: "string"
        example: "http://swapi.co/api/species/1/"
      starships:
        type: "array"
        items:
          type: "string"
        example: "http://swapi.co/api/starships/12/"
      vehicles:
        type: "array"
        items:
          type: "string"
        example: "http://swapi.co/api/vehicles/14/"
      url:
        type: "string"
      created:
        type: "string"
      edited:
        type: "string"
  starship:
    type: "object"
    required:
    - "name"
    properties:
      model:
        type: "string"
        example: "T-65 X-wing"
      starship_Class:
        type: "string"
        example: "Starfighter"
      name:
        type: "string"
        example: "Death Star"
      Manufacturer:
        type: "string"
      Length:
        type: "integer"
        format: "int32"
      cost_in_credits:
        type: "string"
      max_atmospheric_speed:
        type: "string"
      hyperdrive_rating:
        type: "string"
      MGLT:
        type: "string"
      cargo-capacity:
        type: "string"
      consumables:
        type: "string"
      films:
        type: "string"
      pilots:
        type: "string"
      url:
        type: "string"
      credited:
        type: "string"
      edited:
        type: "string"
  species:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "mammal"
      classification:
        type: "string"
        example: "senitent"
      average_lifespan:
        type: "string"
      eye_color:
        type: "string"
      hair_color:
        type: "string"
      skin_color:
        type: "string"
      average_height:
        type: "string"
      mass:
        type: "string"
      language:
        type: "string"
      homeworld:
        type: "string"
      films:
        type: "array"
        items:
          type: "string"
        example: "http://swapi.co/api/films/1/"
      species:
        type: "array"
        items:
          type: "string"
        example: "http://swapi.co/api/species/1/"
      url:
        type: "string"
      created:
        type: "string"
      edited:
        type: "string"

